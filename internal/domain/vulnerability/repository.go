package vulnerability

import "context"

// Repository defines the interface for vulnerability data access
type Repository interface {
	// Vulnerability operations
	Create(ctx context.Context, vuln *Vulnerability) (int64, error)
	GetByID(ctx context.Context, userID int64, id int64) (*Vulnerability, error)
	Update(ctx context.Context, vuln *Vulnerability) error
	Delete(ctx context.Context, userID int64, id int64) error
	List(ctx context.Context, userID int64, filter Filter) ([]*Vulnerability, error)
	ListWithPagination(ctx context.Context, userID int64, filter Filter, limit, offset int) ([]*Vulnerability, int64, error)
	UpdateStatus(ctx context.Context, userID int64, id int64, status string, resolvedAt *string) error

	// Summary and statistics
	CountBySeverity(ctx context.Context, userID int64) (*SeveritySummary, error)
	CountByStatus(ctx context.Context, userID int64) (*StatusSummary, error)
	GetTopVulnerabilities(ctx context.Context, userID int64, limit int) ([]*Vulnerability, error)

	// Resource-specific queries
	ListByResource(ctx context.Context, userID int64, resourceID string) ([]*Vulnerability, error)
	CountByResource(ctx context.Context, userID int64, resourceID string) (int64, error)

	// Scan operations
	CreateScan(ctx context.Context, scan *VulnerabilityScan) (int64, error)
	GetScanByID(ctx context.Context, userID int64, id int64) (*VulnerabilityScan, error)
	UpdateScan(ctx context.Context, scan *VulnerabilityScan) error
	ListScans(ctx context.Context, userID int64, filter ScanFilter) ([]*VulnerabilityScan, error)
	ListScansWithPagination(ctx context.Context, userID int64, filter ScanFilter, limit, offset int) ([]*VulnerabilityScan, int64, error)
	GetLatestScan(ctx context.Context, userID int64, resourceID string) (*VulnerabilityScan, error)
}
