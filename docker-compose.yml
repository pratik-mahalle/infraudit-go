version: '3.8'

services:
  # Main API Service
  api:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile
    container_name: infraudit-api
    ports:
      - "8080:8080"
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - DB_DRIVER=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=infraudit
      - DB_USER=infraudit
      - DB_PASSWORD=infraudit123
      - DB_SSLMODE=disable
      - REDIS_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=http://localhost:5173
      - JWT_SECRET=development-secret-change-in-production
      - LOG_LEVEL=debug
      - LOG_FORMAT=console
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/data
    networks:
      - infraudit-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: infraudit-postgres
    environment:
      - POSTGRES_USER=infraudit
      - POSTGRES_PASSWORD=infraudit123
      - POSTGRES_DB=infraudit
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - infraudit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U infraudit"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: infraudit-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - infraudit-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Prometheus (optional - for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: infraudit-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - infraudit-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (optional - for dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: infraudit-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - infraudit-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  infraudit-network:
    driver: bridge
